/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package xdrSchema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class XdrSipInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -486354567243287095L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"XdrSipInfo\",\"namespace\":\"xdrSchema\",\"fields\":[{\"name\":\"CallDirection\",\"type\":\"int\",\"default\":0},{\"name\":\"CallType\",\"type\":\"int\",\"default\":0},{\"name\":\"HookReason\",\"type\":\"int\",\"default\":0},{\"name\":\"SignalType\",\"type\":\"int\",\"default\":0},{\"name\":\"DataflowNum\",\"type\":\"int\",\"default\":0},{\"name\":\"SipInvite\",\"type\":\"int\",\"default\":0},{\"name\":\"SipBye\",\"type\":\"int\",\"default\":0},{\"name\":\"Malloc\",\"type\":\"int\",\"default\":0},{\"name\":\"Resv\",\"type\":\"int\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<XdrSipInfo> ENCODER =
      new BinaryMessageEncoder<XdrSipInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<XdrSipInfo> DECODER =
      new BinaryMessageDecoder<XdrSipInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<XdrSipInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<XdrSipInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<XdrSipInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this XdrSipInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a XdrSipInfo from a ByteBuffer. */
  public static XdrSipInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int CallDirection;
  @Deprecated public int CallType;
  @Deprecated public int HookReason;
  @Deprecated public int SignalType;
  @Deprecated public int DataflowNum;
  @Deprecated public int SipInvite;
  @Deprecated public int SipBye;
  @Deprecated public int Malloc;
  @Deprecated public int Resv;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public XdrSipInfo() {}

  /**
   * All-args constructor.
   * @param CallDirection The new value for CallDirection
   * @param CallType The new value for CallType
   * @param HookReason The new value for HookReason
   * @param SignalType The new value for SignalType
   * @param DataflowNum The new value for DataflowNum
   * @param SipInvite The new value for SipInvite
   * @param SipBye The new value for SipBye
   * @param Malloc The new value for Malloc
   * @param Resv The new value for Resv
   */
  public XdrSipInfo(java.lang.Integer CallDirection, java.lang.Integer CallType, java.lang.Integer HookReason, java.lang.Integer SignalType, java.lang.Integer DataflowNum, java.lang.Integer SipInvite, java.lang.Integer SipBye, java.lang.Integer Malloc, java.lang.Integer Resv) {
    this.CallDirection = CallDirection;
    this.CallType = CallType;
    this.HookReason = HookReason;
    this.SignalType = SignalType;
    this.DataflowNum = DataflowNum;
    this.SipInvite = SipInvite;
    this.SipBye = SipBye;
    this.Malloc = Malloc;
    this.Resv = Resv;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CallDirection;
    case 1: return CallType;
    case 2: return HookReason;
    case 3: return SignalType;
    case 4: return DataflowNum;
    case 5: return SipInvite;
    case 6: return SipBye;
    case 7: return Malloc;
    case 8: return Resv;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CallDirection = (java.lang.Integer)value$; break;
    case 1: CallType = (java.lang.Integer)value$; break;
    case 2: HookReason = (java.lang.Integer)value$; break;
    case 3: SignalType = (java.lang.Integer)value$; break;
    case 4: DataflowNum = (java.lang.Integer)value$; break;
    case 5: SipInvite = (java.lang.Integer)value$; break;
    case 6: SipBye = (java.lang.Integer)value$; break;
    case 7: Malloc = (java.lang.Integer)value$; break;
    case 8: Resv = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CallDirection' field.
   * @return The value of the 'CallDirection' field.
   */
  public java.lang.Integer getCallDirection() {
    return CallDirection;
  }

  /**
   * Sets the value of the 'CallDirection' field.
   * @param value the value to set.
   */
  public void setCallDirection(java.lang.Integer value) {
    this.CallDirection = value;
  }

  /**
   * Gets the value of the 'CallType' field.
   * @return The value of the 'CallType' field.
   */
  public java.lang.Integer getCallType() {
    return CallType;
  }

  /**
   * Sets the value of the 'CallType' field.
   * @param value the value to set.
   */
  public void setCallType(java.lang.Integer value) {
    this.CallType = value;
  }

  /**
   * Gets the value of the 'HookReason' field.
   * @return The value of the 'HookReason' field.
   */
  public java.lang.Integer getHookReason() {
    return HookReason;
  }

  /**
   * Sets the value of the 'HookReason' field.
   * @param value the value to set.
   */
  public void setHookReason(java.lang.Integer value) {
    this.HookReason = value;
  }

  /**
   * Gets the value of the 'SignalType' field.
   * @return The value of the 'SignalType' field.
   */
  public java.lang.Integer getSignalType() {
    return SignalType;
  }

  /**
   * Sets the value of the 'SignalType' field.
   * @param value the value to set.
   */
  public void setSignalType(java.lang.Integer value) {
    this.SignalType = value;
  }

  /**
   * Gets the value of the 'DataflowNum' field.
   * @return The value of the 'DataflowNum' field.
   */
  public java.lang.Integer getDataflowNum() {
    return DataflowNum;
  }

  /**
   * Sets the value of the 'DataflowNum' field.
   * @param value the value to set.
   */
  public void setDataflowNum(java.lang.Integer value) {
    this.DataflowNum = value;
  }

  /**
   * Gets the value of the 'SipInvite' field.
   * @return The value of the 'SipInvite' field.
   */
  public java.lang.Integer getSipInvite() {
    return SipInvite;
  }

  /**
   * Sets the value of the 'SipInvite' field.
   * @param value the value to set.
   */
  public void setSipInvite(java.lang.Integer value) {
    this.SipInvite = value;
  }

  /**
   * Gets the value of the 'SipBye' field.
   * @return The value of the 'SipBye' field.
   */
  public java.lang.Integer getSipBye() {
    return SipBye;
  }

  /**
   * Sets the value of the 'SipBye' field.
   * @param value the value to set.
   */
  public void setSipBye(java.lang.Integer value) {
    this.SipBye = value;
  }

  /**
   * Gets the value of the 'Malloc' field.
   * @return The value of the 'Malloc' field.
   */
  public java.lang.Integer getMalloc() {
    return Malloc;
  }

  /**
   * Sets the value of the 'Malloc' field.
   * @param value the value to set.
   */
  public void setMalloc(java.lang.Integer value) {
    this.Malloc = value;
  }

  /**
   * Gets the value of the 'Resv' field.
   * @return The value of the 'Resv' field.
   */
  public java.lang.Integer getResv() {
    return Resv;
  }

  /**
   * Sets the value of the 'Resv' field.
   * @param value the value to set.
   */
  public void setResv(java.lang.Integer value) {
    this.Resv = value;
  }

  /**
   * Creates a new XdrSipInfo RecordBuilder.
   * @return A new XdrSipInfo RecordBuilder
   */
  public static xdrSchema.XdrSipInfo.Builder newBuilder() {
    return new xdrSchema.XdrSipInfo.Builder();
  }

  /**
   * Creates a new XdrSipInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new XdrSipInfo RecordBuilder
   */
  public static xdrSchema.XdrSipInfo.Builder newBuilder(xdrSchema.XdrSipInfo.Builder other) {
    return new xdrSchema.XdrSipInfo.Builder(other);
  }

  /**
   * Creates a new XdrSipInfo RecordBuilder by copying an existing XdrSipInfo instance.
   * @param other The existing instance to copy.
   * @return A new XdrSipInfo RecordBuilder
   */
  public static xdrSchema.XdrSipInfo.Builder newBuilder(xdrSchema.XdrSipInfo other) {
    return new xdrSchema.XdrSipInfo.Builder(other);
  }

  /**
   * RecordBuilder for XdrSipInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<XdrSipInfo>
    implements org.apache.avro.data.RecordBuilder<XdrSipInfo> {

    private int CallDirection;
    private int CallType;
    private int HookReason;
    private int SignalType;
    private int DataflowNum;
    private int SipInvite;
    private int SipBye;
    private int Malloc;
    private int Resv;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(xdrSchema.XdrSipInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CallDirection)) {
        this.CallDirection = data().deepCopy(fields()[0].schema(), other.CallDirection);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CallType)) {
        this.CallType = data().deepCopy(fields()[1].schema(), other.CallType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.HookReason)) {
        this.HookReason = data().deepCopy(fields()[2].schema(), other.HookReason);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SignalType)) {
        this.SignalType = data().deepCopy(fields()[3].schema(), other.SignalType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.DataflowNum)) {
        this.DataflowNum = data().deepCopy(fields()[4].schema(), other.DataflowNum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SipInvite)) {
        this.SipInvite = data().deepCopy(fields()[5].schema(), other.SipInvite);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.SipBye)) {
        this.SipBye = data().deepCopy(fields()[6].schema(), other.SipBye);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Malloc)) {
        this.Malloc = data().deepCopy(fields()[7].schema(), other.Malloc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.Resv)) {
        this.Resv = data().deepCopy(fields()[8].schema(), other.Resv);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing XdrSipInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(xdrSchema.XdrSipInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CallDirection)) {
        this.CallDirection = data().deepCopy(fields()[0].schema(), other.CallDirection);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CallType)) {
        this.CallType = data().deepCopy(fields()[1].schema(), other.CallType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.HookReason)) {
        this.HookReason = data().deepCopy(fields()[2].schema(), other.HookReason);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SignalType)) {
        this.SignalType = data().deepCopy(fields()[3].schema(), other.SignalType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.DataflowNum)) {
        this.DataflowNum = data().deepCopy(fields()[4].schema(), other.DataflowNum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.SipInvite)) {
        this.SipInvite = data().deepCopy(fields()[5].schema(), other.SipInvite);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.SipBye)) {
        this.SipBye = data().deepCopy(fields()[6].schema(), other.SipBye);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Malloc)) {
        this.Malloc = data().deepCopy(fields()[7].schema(), other.Malloc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.Resv)) {
        this.Resv = data().deepCopy(fields()[8].schema(), other.Resv);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'CallDirection' field.
      * @return The value.
      */
    public java.lang.Integer getCallDirection() {
      return CallDirection;
    }

    /**
      * Sets the value of the 'CallDirection' field.
      * @param value The value of 'CallDirection'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setCallDirection(int value) {
      validate(fields()[0], value);
      this.CallDirection = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CallDirection' field has been set.
      * @return True if the 'CallDirection' field has been set, false otherwise.
      */
    public boolean hasCallDirection() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CallDirection' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearCallDirection() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CallType' field.
      * @return The value.
      */
    public java.lang.Integer getCallType() {
      return CallType;
    }

    /**
      * Sets the value of the 'CallType' field.
      * @param value The value of 'CallType'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setCallType(int value) {
      validate(fields()[1], value);
      this.CallType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CallType' field has been set.
      * @return True if the 'CallType' field has been set, false otherwise.
      */
    public boolean hasCallType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CallType' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearCallType() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'HookReason' field.
      * @return The value.
      */
    public java.lang.Integer getHookReason() {
      return HookReason;
    }

    /**
      * Sets the value of the 'HookReason' field.
      * @param value The value of 'HookReason'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setHookReason(int value) {
      validate(fields()[2], value);
      this.HookReason = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'HookReason' field has been set.
      * @return True if the 'HookReason' field has been set, false otherwise.
      */
    public boolean hasHookReason() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'HookReason' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearHookReason() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'SignalType' field.
      * @return The value.
      */
    public java.lang.Integer getSignalType() {
      return SignalType;
    }

    /**
      * Sets the value of the 'SignalType' field.
      * @param value The value of 'SignalType'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setSignalType(int value) {
      validate(fields()[3], value);
      this.SignalType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'SignalType' field has been set.
      * @return True if the 'SignalType' field has been set, false otherwise.
      */
    public boolean hasSignalType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'SignalType' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearSignalType() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'DataflowNum' field.
      * @return The value.
      */
    public java.lang.Integer getDataflowNum() {
      return DataflowNum;
    }

    /**
      * Sets the value of the 'DataflowNum' field.
      * @param value The value of 'DataflowNum'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setDataflowNum(int value) {
      validate(fields()[4], value);
      this.DataflowNum = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'DataflowNum' field has been set.
      * @return True if the 'DataflowNum' field has been set, false otherwise.
      */
    public boolean hasDataflowNum() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'DataflowNum' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearDataflowNum() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'SipInvite' field.
      * @return The value.
      */
    public java.lang.Integer getSipInvite() {
      return SipInvite;
    }

    /**
      * Sets the value of the 'SipInvite' field.
      * @param value The value of 'SipInvite'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setSipInvite(int value) {
      validate(fields()[5], value);
      this.SipInvite = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'SipInvite' field has been set.
      * @return True if the 'SipInvite' field has been set, false otherwise.
      */
    public boolean hasSipInvite() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'SipInvite' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearSipInvite() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'SipBye' field.
      * @return The value.
      */
    public java.lang.Integer getSipBye() {
      return SipBye;
    }

    /**
      * Sets the value of the 'SipBye' field.
      * @param value The value of 'SipBye'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setSipBye(int value) {
      validate(fields()[6], value);
      this.SipBye = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'SipBye' field has been set.
      * @return True if the 'SipBye' field has been set, false otherwise.
      */
    public boolean hasSipBye() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'SipBye' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearSipBye() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Malloc' field.
      * @return The value.
      */
    public java.lang.Integer getMalloc() {
      return Malloc;
    }

    /**
      * Sets the value of the 'Malloc' field.
      * @param value The value of 'Malloc'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setMalloc(int value) {
      validate(fields()[7], value);
      this.Malloc = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Malloc' field has been set.
      * @return True if the 'Malloc' field has been set, false otherwise.
      */
    public boolean hasMalloc() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'Malloc' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearMalloc() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'Resv' field.
      * @return The value.
      */
    public java.lang.Integer getResv() {
      return Resv;
    }

    /**
      * Sets the value of the 'Resv' field.
      * @param value The value of 'Resv'.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder setResv(int value) {
      validate(fields()[8], value);
      this.Resv = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'Resv' field has been set.
      * @return True if the 'Resv' field has been set, false otherwise.
      */
    public boolean hasResv() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'Resv' field.
      * @return This builder.
      */
    public xdrSchema.XdrSipInfo.Builder clearResv() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @SuppressWarnings("unchecked")
    public XdrSipInfo build() {
      try {
        XdrSipInfo record = new XdrSipInfo();
        record.CallDirection = fieldSetFlags()[0] ? this.CallDirection : (java.lang.Integer) defaultValue(fields()[0]);
        record.CallType = fieldSetFlags()[1] ? this.CallType : (java.lang.Integer) defaultValue(fields()[1]);
        record.HookReason = fieldSetFlags()[2] ? this.HookReason : (java.lang.Integer) defaultValue(fields()[2]);
        record.SignalType = fieldSetFlags()[3] ? this.SignalType : (java.lang.Integer) defaultValue(fields()[3]);
        record.DataflowNum = fieldSetFlags()[4] ? this.DataflowNum : (java.lang.Integer) defaultValue(fields()[4]);
        record.SipInvite = fieldSetFlags()[5] ? this.SipInvite : (java.lang.Integer) defaultValue(fields()[5]);
        record.SipBye = fieldSetFlags()[6] ? this.SipBye : (java.lang.Integer) defaultValue(fields()[6]);
        record.Malloc = fieldSetFlags()[7] ? this.Malloc : (java.lang.Integer) defaultValue(fields()[7]);
        record.Resv = fieldSetFlags()[8] ? this.Resv : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<XdrSipInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<XdrSipInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<XdrSipInfo>
    READER$ = (org.apache.avro.io.DatumReader<XdrSipInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
